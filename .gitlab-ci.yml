stages:
  - build
  - deploy

variables:
  CONTAINER_PHP_CI: $CI_REGISTRY_IMAGE/php-ci:$CI_COMMIT_SHA

#################################################################
# Settings for building docker images - for tests and deployments
#################################################################

.build-template: &build-template
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  stage: build

build-prod:
  <<: *build-template
  variables:
    CONTAINER_FRONTEND_PROD: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    CONTAINER_FRONTEND_PROD_LATEST: $CI_REGISTRY_IMAGE/frontend:latest
  script:
    - DOCKER_BUILDKIT=1 docker build --progress=plain --pull --target web-production -t $CONTAINER_FRONTEND_PROD -f Dockerfile .
    - docker push $CONTAINER_FRONTEND_PROD
    - docker tag $CONTAINER_FRONTEND_PROD $CONTAINER_FRONTEND_PROD_LATEST
    - docker push $CONTAINER_FRONTEND_PROD_LATEST
  only:
    - docker

deploy:
  image:
    name: docker/compose:1.23.2
    entrypoint: ["/bin/sh", "-c"]
  services:
    - docker:dind
  stage: deploy
  variables:
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: "certs"
    STACK_NAME: "minif1"
  before_script:
    - mkdir $DOCKER_CERT_PATH
    - export DOCKER_HOST=$REMOTE_DOCKER_HOST
    - echo "$CA" > $DOCKER_CERT_PATH/ca.pem
    - echo "$CLIENT_CERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$CLIENT_KEY" > $DOCKER_CERT_PATH/key.pem
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - export COMPOSE_COMMAND="docker-compose -f docker-compose.production.yml -p $STACK_NAME"
  script:
    - eval $COMPOSE_COMMAND pull
    # If nginx-proxy is on the network, remove it before calling `down`
    - ((docker network inspect $STACK_NAME -f "{{json .Containers }}" | grep nginx-proxy) && docker network disconnect $STACK_NAME nginx-proxy
      || echo 'Not on network')
    - eval $COMPOSE_COMMAND down
    - eval $COMPOSE_COMMAND up -d
    - docker network connect $STACK_NAME nginx-proxy
    - eval $COMPOSE_COMMAND restart
  after_script:
    - rm -rf $DOCKER_CERT_PATH
  only:
    - docker
